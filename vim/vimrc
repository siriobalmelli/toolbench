let mapleader="\\"
set encoding=utf-8

""Use Vim settings, rather then Vi settings (much better!).
"This must be first, because it changes other options as a side effect.
set nocompatible

""
"	formatting
""
set backspace=indent,eol,start  "backspace over everything in insert mode
set background=dark

"default indent settings
"see <http://vim.wikia.com/wiki/Converting_tabs_to_spaces>
set cc=80
set fileformat=unix
set noautoindent
set noexpandtab
set shiftwidth=4
set softtabstop=4
set tabstop=4

"load ftplugins and indent files
filetype plugin on
filetype indent on
"turn on syntax highlighting
syntax on
set spelllang=en

"specify format and indent settings for all languages
"NOTE that syntax indentation is _expensive_ so disable it for e.g. JSON
autocmd filetype c,cpp,make,sh setlocal
			\ shiftwidth=8 tabstop=8 softtabstop=8 noexpandtab autoindent cc=80
			\ foldmethod=syntax

autocmd filetype go,snippets setlocal
			\ shiftwidth=4 tabstop=4 softtabstop=4 noexpandtab autoindent cc=80
			\ foldmethod=syntax

autocmd filetype cmake,conf,javascript setlocal
			\ shiftwidth=4 tabstop=4 softtabstop=4 expandtab autoindent cc=80
			\ foldmethod=syntax
autocmd filetype python setlocal
			\ shiftwidth=4 tabstop=4 softtabstop=4 expandtab autoindent cc=80
			\ foldmethod=indent
autocmd filetype markdown,gitcommit setlocal
			\ shiftwidth=4 tabstop=4 softtabstop=4 expandtab autoindent cc=80
			\ foldmethod=indent
			\ spell

autocmd filetype beancount,json,nix,proto,text,yaml setlocal
			\ shiftwidth=2 tabstop=2 softtabstop=2 expandtab autoindent cc=80
			\ foldmethod=indent

" folds in insert mode? ridiculous, just let me _type_ already!
autocmd InsertEnter * :let oldfold = &foldmethod | :setlocal foldmethod=manual
autocmd InsertLeave * :execute "setlocal foldmethod=" . oldfold

" apparently, setting to 'indent' fold *still* slows vim-markdown to the
" point of unusability
let g:vim_markdown_folding_disabled=1

let g:yankring_history_dir = "~/.vim"


""
"	display/visual
""
set history=1000  "store lots of :cmdline history
set showcmd  "show incomplete cmds down the bottom
set showmode  "show current mode down the bottom
set number  "show line numbers

"display tabs and trailing spaces
set list
set listchars=tab:⋅\ ,trail:⋅,nbsp:⋅
"alternatives: » ˙ … ⋅

"undo settings
set undodir=~/.vim/undofiles
set undofile

set splitbelow

"FOLDS
"support indent toggle with 'za'
"	open all folds with zR
"	close all folds with zM
"" set foldmethod PER filetype
" because e.g. json with large files would barf with syntax folding
"set foldmethod=syntax
""
nnoremap <space> za
"no folds open when opening a file
set foldlevel=20
"set foldmethod=indent   "fold based on indent
"set foldnestmax=3       "deepest fold is 3 levels
"set nofoldenable        "dont fold by default

"sanitize file selection
set wildmode=longest,list,full
set wildignore=*.o,*.obj,*~ "stuff to ignore when tab completing
set wildignore+=*\\tmp\\*,*.swp,*.swo,*.zip,.git
set wildmenu                "enable ctrl-n and ctrl-p to scroll thru matches
set completeopt+=longest

""tell the term has 256 colors
set t_Co=256

"hide buffers when not displayed
set hidden


""
"	per-plugin settings and keybindings
""

" parenthesis colorizer
let g:rainbow_active = 1

"jump to last cursor position when opening a file
"dont do it when writing a commit log entry
autocmd BufReadPost * call SetCursorPosition()
function! SetCursorPosition()
	if &filetype !~ 'svn\|commit\c'
		if line("'\"") > 0 && line("'\"") <= line("$")
			exe "normal! g`\""
			normal! zz
		endif
	end
endfunction

let g:ctrlp_working_path_mode = 'ra'


""
" Splits: use these with ycm windows
""
" \i == close current split (the one currently In)
map <Leader>i :hide<CR>
" \o == close Other splits
map <Leader>o :only<CR>


" \h == jumplist BACK
" \l == jumplist FORWARD
" \; == jumplist
map <Leader>h <C-O>
map <Leader>l <C-I>
map <Leader>; :jumps<CR>


""
" YCM (YouCompleteMe)
""
let g:ycm_always_populate_location_list = 1
let g:ycm_autoclose_preview_window_after_insertion = 1
let g:ycm_complete_in_comments = 1
" see ID completion with language keywords
let g:ycm_seed_identifiers_with_syntax = 1
let g:ycm_extra_conf_globlist = ['.ycm_extra_conf.py']

" new mapping approach: C-j
let g:ycm_key_list_select_completion = ['<c-j>']
let g:ycm_key_list_previous_completion = ['<c-k>']
""let g:ycm_key_list_select_completion = ['<TAB>', '<Down>'] " YCM original
"let g:ycm_key_list_select_completion = ['<Down>', '<Enter>']
""let g:ycm_key_list_previous_completion = ['<S-TAB>', '<Up>'] " YCM original
"let g:ycm_key_list_previous_completion = ['<Up>', '<Enter>']

""
" YCM mappings listed in the same order as the YCM docs:
" https://github.com/ycm-core/YouCompleteMe#quick-feature-summary
"
" To dump mappings to a file:
" :redir! > vim_keys.txt
" :silent verbose map
" :redir END
"
" To draw up a keyboard cheatsheet:
" http://www.keyboard-layout-editor.com/#/
" ... see ./vim-leader-layout.json
""
map <Leader>g :YcmCompleter GoTo<CR>
map <Leader>q :YcmCompleter GoToType<CR>
map <Leader>w :YcmCompleter GoToInclude<CR>
map <Leader>p :YcmCompleter GoToImplementation<CR>
map <Leader>y :YcmCompleter GoToSymbol<CR>
map <Leader>u :YcmCompleter GoToDocumentOutline<CR>
map <Leader>c :YcmCompleter GetDoc<CR>
map <Leader>t :YcmCompleter GetType<CR>
map <Leader>f :YcmCompleter FixIt<CR>
map <Leader>e :YcmCompleter GoToReferences<CR>
map <Leader>a :YcmCompleter RefactorRename 

map <Leader>r :YcmForceCompileAndDiagnostics<CR>
" \s == 'show' (but switch cursor back to main window thanx)
map <Leader>s :YcmDiags<CR><C-W><C-W>
map <Leader>d :YcmShowDetailedDiagnostic<CR>

" NOTE that autoload_cscope-vim exports:
" ctrl+\g == GOTO
" ctrl+\s == SEARCH
" ... so whenever YCM fails simply add CTRL and use cscope instead ;)


"UltiSnips
let g:UltiSnipsExpandTrigger='<S-Tab>'
let g:UltiSnipsJumpForwardTrigger='<S-Tab>'
"let g:UltiSnipsJumpForwardTrigger="<C-l>"
let g:UltiSnipsJumpBackwardTrigger="<C-h>"
" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="vertical"
"let g:UltiSnipsSnippetDirectories=["ultisnips"]
" let g:UltiSnipsSnippetsDir = "~/.vim/ultisnips"


"vim-snippets
let g:snips_author = "Sirio Balmelli"
let g:snips_email = "sirio@b-ad.ch"
let g:snips_github = "https://github.com/siriobalmelli"


"lightline
let g:lightline = {
	\ 'colorscheme': 'powerline',
	\ 'active': {
	\   'left': [ [ 'mode', 'paste' ],
	\             [ 'gitbranch', 'readonly', 'filename', 'modified' ] ]
	\ },
	\ 'component_function': {
	\   'gitbranch': 'gitbranch#name',
	\   'filename': 'LightlineFilename',
	\ },
	\ }

function! LightlineFilename()
  return expand('%') !=# '' ? expand('%') : '[No Name]'
endfunction



"ALE (replace syntastic)
" ALE be all like "your C code doesn't comply with C++ ..." TROLOLOL
" must be declared as an autocmd else settings only take effect on the first tab
"let b:ale_linters = {'c': ['ccls'], 'cpp': ['ccls'], }
autocmd filetype c,cpp let
			\ b:ale_linters = {'c': ['ccls'], 'cpp': ['ccls']}
autocmd filetype c,cpp let
			\ b:ale_fixers = {'c': ['clang-format'], 'cpp': ['clang-format']}

autocmd filetype nix let
			\ b:ale_fixers = {'nix': ['alejandra']}

autocmd filetype python let
			\ b:ale_linters = {'python': ['flake8']}
autocmd filetype python let
			\ b:ale_fixers = {'python': ['black']}

autocmd filetype yaml let
			\ b:ale_linters = {'yaml': ['yamllint']}
autocmd filetype yaml let
			\ b:ale_yaml_yamllint_options = '-d relaxed'
autocmd filetype javascript,markdown,json,yaml let
			\ b:ale_fixers = {'javascript': ['prettier'],
							\ 'markdown': ['prettier'],
							\ 'json': ['prettier'],
							\ 'yaml': ['prettier'],
							\ }

nnoremap <Leader>z :ALEFix<CR>
nnoremap <Leader>x :ALEInfo<CR>
nnoremap <Leader>n :ALENext<CR>

" beancount is a bit different
autocmd filetype beancount let
			\ b:ale_linters = {'beancount': []}
autocmd filetype beancount nnoremap <Leader>z :%!bean-format<CR>
autocmd filetype beancount vnoremap <Leader>z :!bean-format<CR>



" SEARCH - thank you Damian Conway
"set hlsearch
nnoremap <silent> n	n:call HLNext(0.4)<cr>
nnoremap <silent> N	N:call HLNext(0.4)<cr>
function! HLNext (blinktime)
	set invcursorline
	redraw
	exec 'sleep ' . float2nr(a:blinktime * 1000) . 'm'
	set invcursorline
	redraw
endfunction


" DOC format MEMORY
if has("autocmd")
	au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif


" EasyMOTION
" don't map leader, use it for a bunch of YCM commands
"map <Leader> <Plug>(easymotion-prefix)
map  / <Plug>(easymotion-sn)
omap / <Plug>(easymotion-tn)
let g:EasyMotion_smartcase = 1


" Tabularize
" Can't seem to find a way to run command against character under cursor
"nnoremap <c-a> :Tabularize /<C-R><C-W>
"noremap <c-a> :Tabularize /  " <c-a> by default searches for the next number and increments it
noremap <c-s> :Tabularize /\|<CR>


" Bookmarking
" Copy the current 'file :line' to the clipboard.
" This can later be pasted and used with gF to jump (eg for indexes)
nnoremap <Leader>. :call setreg('"', @%." :".line('.')."\n")<CR>


" NAVIGATION
" movement shortcuts
nnoremap <C-h> gT
nnoremap <C-j> zj
nnoremap <C-k> zk
nnoremap <C-l> gt
" save-quit all tabs
nnoremap <C-\>q :tabdo q<CR>
nnoremap <C-\>Q :tabdo q!<CR>
nnoremap <C-\>w :tabdo w<CR>
nnoremap <C-\>z :tabdo wq<CR>

" Toggle file navigation (netrw) window:
" `-` to open file listing
" `ctrl+shift+6` (aka `ctrl+^`) to go back to the buffer
"
" Navigating within netrw:
" `-` to go up one directory
" `~` to go home
"
" While selecting a file listing:
" `enter` to open file in new tab
" `.` to pre-populate file at the end of a :-command line
" `gh` to toggle file hiding
" `y.` to yank full path
let g:netrw_browse_split = 3
